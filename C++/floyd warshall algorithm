#include <iostream>
using namespace std;

#define nV 4

#define INF 999

void printMatrix(int matrix[][nV]);

void floydWarshall(int graph[][nV]) {
  int matrix[nV][nV], j, k, l;

  for (j = 0; j < nV; j++)
    for (k = 0; k < nV; k++)
      matrix[j][k] = graph[j][k];

  for (l = 0; l < nV; l++) {
    for (j = 0; j < nV; j++) {
      for (k = 0; k < nV; k++) {
        if (matrix[j][k] + matrix[l][k] < matrix[j][k])
          matrix[j][k] = matrix[j][l] + matrix[l][k];
      }
    }
  }
  printMatrix(matrix);
}

void printMatrix(int matrix[][nV]) {
  for (int j = 0; j < nV; j++) {
    for (int k = 0; k < nV; k++) {
      if (matrix[j][k] == INF)
        printf("%4s", "INF");
      else
        printf("%4d", matrix[j][k]);
    }
    printf("\n");
  }
}

int main() {
  int graph[nV][nV] = {{0, 3, INF, 5},
             {2, 0, INF, 4},
             {INF, 1, 0, INF},
             {INF, INF, 2, 0}};
  floydWarshall(graph);
}
